#include <iostream>
#include <string>
#include <vector>
#include <algorithm> 

using namespace std;

class Time {
	friend ostream& operator<<(ostream& out, const Time& t);
public:
	void set(int, int);
	void read(string);
	bool operator<(Time& other);
	Time operator-(Time& other);
	Time operator+(Time& other);
	Time& operator++(); // pre-increment
	Time operator++(int); // post-increment 
	private:
	int hour = 0; //default constructor sets values to zero
	int min = 0;
};

void Time::read(string motd) { //read from console
	int h;
	int m;
	cout << motd << endl;
	cin >> h >> m;
	hour = h;
	min = m;
}

bool Time::operator<(Time& other) //less-than
{
	int time1 = 60 * hour + min;
	int time2 = 60 * other.hour + other.min;
	if (time1 < time2) { return true; }
	else { return false; }
}


void Time::set(int h, int m) { //manual set time to variable
	hour = h;
	min = m;
}


ostream& operator<<(ostream& out, const Time& t) //output
{
	string h = "0";
	string m = "0";
	if (t.hour <= 9) { h.append(to_string(t.hour)); out << h; } //if needs adding leading zero
	else { out << t.hour; } 
	cout << ":";
	if (t.min <= 9) { m.append(to_string(t.min)); out << m; } //if needs adding leading zero
	else { out << t.min; }
	cout << endl;
	return out;
}

Time Time::operator-(Time& other) //substraction
{
	int Time2 = 60 * hour + min;
	int Time1 = 60 * other.hour + other.min;
	int h = (Time2 - Time1) / 60;
	int m = (Time2 - Time1) % 60;
	Time result;
	result.set(h, m);
	return result;
}

Time Time::operator+(Time& other) //addition
{
	int Time2 = 60 * hour + min;
	int Time1 = 60 * other.hour + other.min;
	int h = (Time2 + Time1) / 60;
	int m = (Time2 + Time1) % 60;
	if (h >= 24) { h = h - 24; } //next day 
	Time result;
	result.set(h, m);
	return result;
}

Time& Time::operator++() //pre-increment
{
	min = ++min; //incrementing
	if (min >= 60) { hour = hour + 1; min = min - 60; } //next hour
	if (hour >= 24) { hour = hour - 24; } //next day
	return *this; //returning the INCREMENTED value
}

Time Time::operator++(int) //post-increment
{
	Time temp;
	temp.set(hour, min); //storing the BEFORE increment value
	min = ++min; //incrementing
	if (min >= 60) { hour = hour + 1; min = min - 60; } //next hour
	if (hour >= 24) { hour = hour - 24; } //next day
	return temp; //returning the BEFORE increment value
}

void print(const vector<Time>& v)
{
	for (auto& t : v) {
		cout << t << endl;
	}
}


int main() {
	Time time1, time2, duration;

	time1.read("Enter time 1");
	time2.read("Enter time 2");
	if (time1 < time2) {
		duration = time2 - time1;
		cout << "Starting time was " << time1 << endl;
	}
	else {
		duration = time1 - time2;
		cout << "Starting time was " << time2 << endl;
	}
	cout << "Duration was " << duration << endl;

	vector<Time> tv(5);
	for (auto& t : tv) {
		t.read("Enter time:");
	}

	cout << "Times: " << endl;
	print(tv);

	Time sum;
	for (auto t : tv) {
		sum = sum + t;
	}

	cout << "Sum of times: " << sum << endl;

	cout << "Post-increment: " << endl;
	print(tv);
	for (auto& t : tv) {
		cout << t++ << endl;
	}

	print(tv);

	cout << "Pre-increment: " << endl;
	for (auto& t : tv) {
		cout << ++t << endl;
	}

	sort(tv.begin(), tv.end());

	cout << "Sorted times: " << endl;
	print(tv);

	return 0;
} 




